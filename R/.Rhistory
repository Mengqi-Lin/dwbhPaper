side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 1000,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_dec_postres <- lapply(wBH_oracle_dec, function(x){
wBH_postprocess(x)
})
FDR.filename <- "../figs/wBH_oracle_dec_FDR.pdf"
pdf(FDR.filename, width = 9, height = 2.8)
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
ylim <- c(0, 0.25)
for (k in 1:3){
FDP <- wBH_oracle_dec_postres[[k]]$FDR
plot_results(FDP, methods, titles[k], cols, ltys, pchs,
ylim = ylim, ylab = "FDR",
legend = (k == 1), cex.legend = 1.1,
alphas = alphas)
}
dev.off()
power.filename <- "../figs/wBH_oracle_dec_power.pdf"
pdf(power.filename, width = 9, height = 2.8)
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_dec_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 0.5), ylab = "power",
alphas = alphas,
legend = F)
}
dev.off()
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_dec_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 0.5), ylab = "power",
alphas = alphas,
legend = F)
}
wBH_oracle_inr <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 4, length.out = ng),
pi1_g = seq(0.01, 0.05, length.out = ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 100,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_inr_postres <- lapply(wBH_oracle_inr, function(x){
wBH_postprocess(x)
})
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_inr_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 1), ylab = "power",
alphas = alphas,
legend = F)
}
wBH_oracle_inr <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 4, length.out = ng),
pi1_g = seq(0.05, 0.1, length.out = ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 100,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_inr_postres <- lapply(wBH_oracle_inr, function(x){
wBH_postprocess(x)
})
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_inr_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 1), ylab = "power",
alphas = alphas,
legend = F)
}
wBH_oracle_inr <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 4, length.out = ng),
pi1_g = seq(0.005, 0.05, length.out = ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 100,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_inr_postres <- lapply(wBH_oracle_inr, function(x){
wBH_postprocess(x)
})
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_inr_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 1), ylab = "power",
alphas = alphas,
legend = F)
}
wBH_oracle_inr <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 4, length.out = ng),
pi1_g = seq(0.01, 0.1, length.out = ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 100,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_inr_postres <- lapply(wBH_oracle_inr, function(x){
wBH_postprocess(x)
})
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_inr_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 1), ylab = "power",
alphas = alphas,
legend = F)
}
wBH_oracle_inr <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 4, length.out = ng),
pi1_g = seq(0.01, 0.05, length.out = ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 100,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_inr_postres <- lapply(wBH_oracle_inr, function(x){
wBH_postprocess(x)
})
wBH_oracle_inr <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 4, length.out = ng),
pi1_g = seq(0.01, 0.05, length.out = ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 1000,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_inr_postres <- lapply(wBH_oracle_inr, function(x){
wBH_postprocess(x)
})
FDR.filename <- "../figs/wBH_oracle_inc_FDR.pdf"
pdf(FDR.filename, width = 9, height = 2.8)
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
titles <- c(paste0(ngroups[1], " groups "), paste0(ngroups[2], " groups "),
paste0(ngroups[3], " groups "))
ylim <- c(0, 0.25)
for (k in 1:3){
FDP <- wBH_oracle_inr_postres[[k]]$FDR
plot_results(FDP, methods, titles[k], cols, ltys, pchs,
ylim = ylim, ylab = "FDR",
legend = (k == 1), cex.legend = 1.1,
alphas = alphas)
}
dev.off()
power.filename <- "../figs/wBH_oracle_inc_power.pdf"
pdf(power.filename, width = 9, height = 2.8)
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_inr_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 1), ylab = "power",
alphas = alphas,
legend = F)
}
dev.off()
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_fix_mu1_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 0.5), ylab = "power",
alphas = alphas,
legend = F)
}
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_fixpi1_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 0.6), ylab = "power",
alphas = alphas,
legend = F)
}
set.seed(1)
wBH_oracle_fixpi1 <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 4, length.out = ng),
pi1_g = rep(0.01, ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 100,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_fixpi1_postres <- lapply(wBH_oracle_fixpi1, function(x){
wBH_postprocess(x)
})
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_fixpi1_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 0.6), ylab = "power",
alphas = alphas,
legend = F)
}
wBH_oracle_fixpi1 <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 5, length.out = ng),
pi1_g = rep(0.01, ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 100,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_fixpi1_postres <- lapply(wBH_oracle_fixpi1, function(x){
wBH_postprocess(x)
})
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_fixpi1_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 0.6), ylab = "power",
alphas = alphas,
legend = F)
}
## fix pi1
set.seed(1)
wBH_oracle_fixpi1 <- lapply(ngroups, function(ng){
wBH_mvgauss_groups_expr(n_g = rep(1000, ng),
mu1_g = seq(1, 4, length.out = ng),
pi1_g = rep(0.01, ng),
Sigma_type = "iid",
side = "one",
alphas = c(0.05, 0.1, 0.2),
nreps = 1000,
weight_type = c("trivial", "GBH", "optimal"),
skip_BY = F,
pi0Est = T)
})
wBH_oracle_fixpi1_postres <- lapply(wBH_oracle_fixpi1, function(x){
wBH_postprocess(x)
})
FDR.filename <- "../figs/wBH_oracle_fixpi1_FDR.pdf"
pdf(FDR.filename, width = 9, height = 2.8)
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
titles <- c(paste0(ngroups[1], " groups "), paste0(ngroups[2], " groups "),
paste0(ngroups[3], " groups "))
ylim <- c(0, 0.25)
for (k in 1:3){
FDP <- wBH_oracle_fixpi1_postres[[k]]$FDR
plot_results(FDP, methods, titles[k], cols, ltys, pchs,
ylim = ylim, ylab = "FDR",
legend = (k == 1), cex.legend = 1.1,
alphas = alphas)
}
dev.off()
power.filename <- "../figs/wBH_oracle_fixpi1_power.pdf"
pdf(power.filename, width = 9, height = 2.8)
par(mfrow = c(1, 3), mar = c(4, 5, 2, 2), oma=c(0, 0, 0, 5), cex.axis = 1.7, cex.main = 1.7, cex.lab = 1.7)
for (k in 1:3){
power <- wBH_oracle_fixpi1_postres[[k]]$power
plot_results(power, methods, titles[k], cols, ltys, pchs,
ylim = c(0, 0.6), ylab = "power",
alphas = alphas,
legend = F)
}
dev.off()
alphas
gen_methods_dwBH <- function(gamma,
weight_type,
skip_dBH2){
expr_params <- expand.grid(
gamma = gamma,
weight_type = weight_type
)
# BH_methods <- sapply(weight_type, function(x){
#   weight_type <- paste0("(", x, ")")
#   tmp <- paste0("BH_", weight_type)
#   c(tmp, paste0(tmp, "_safe"))
# })
tmp <- "BH_(trivial)"
BH_methods <- c(tmp, paste0(tmp, "_safe"))
methods <- c(as.character(BH_methods))
dBH_methods <- apply(expr_params, 1, function(x){
if (is.na(x[1])){
gamma <- "safe"
} else {
gamma <- x[1]
}
weight_type <- paste0("(", x[2], ")")
method1 <- paste0("dwBH_", weight_type,
"_", gamma)
method2 <- paste0("dwBH_init_", weight_type,
"_", gamma)
c(method1, method2)
})
methods <- c(methods, as.character(dBH_methods))
if (!skip_dBH2){
dBH2_methods <- apply(expr_params, 1, function(x){
if (is.na(x[1])){
gamma <- "safe"
} else {
gamma <- x[1]
}
weight_type <- paste0("weighting(", x[2], ")")
method1 <- paste0("dwBH2_", weight_type,
"_", gamma)
method2 <- paste0("dwBH2_init_", weight_type,
"_", gamma)
c(method1, method2)
})
methods <- c(methods,
as.character(dBH2_methods))
}
return(methods)
}
gen_methods_dwBH(gamma = c(1, NA), weight_type = c("trivial", "GBH", "optimal"), skip_dBH2 = F)
gen_methods_dwBH(gamma = c(1, NA), weight_type = c("GBH", "optimal"), skip_dBH2 = F)
methods
gamma
gamma <- c(1, NA)
weight_type
weight_type <- c("GBH","optimal")
skip_dBH2 = F
methods <- gen_methods_dwBH(gamma, weight_type, skip_dBH2 = T)
expr_params <- expand.grid(
gamma = gamma,
weight_type = weight_type,
)
expr_params <- expand.grid(
gamma = gamma,
weight_type = weight_type
)
methods
methods <- gen_methods_dwBH(gamma, weight_type, skip_dBH2 = F)
results <- lapply(1:nalphas, function(k){
tmp <- matrix(NA, length(methods), nreps)
rownames(tmp) <- methods
return(list(alpha = alphas[k],
FDP = tmp,
power = tmp,
secBH = tmp))
})
results
alphas
nalphas <- length(alphas)
results <- lapply(1:nalphas, function(k){
tmp <- matrix(NA, length(methods), nreps)
rownames(tmp) <- methods
return(list(alpha = alphas[k],
FDP = tmp,
power = tmp,
secBH = tmp))
})
nreps <- 100
results <- lapply(1:nalphas, function(k){
tmp <- matrix(NA, length(methods), nreps)
rownames(tmp) <- methods
return(list(alpha = alphas[k],
FDP = tmp,
power = tmp,
secBH = tmp))
})
results
results[[1]]
nrow(expr_params)
"GBH" %in% expr_params[, 2]
expr_params[, 2]
nalphas
alphas
n_g
pi0_g
mu1_g
optimal.weights
optimal.weights <- lapply(1:nalphas, function(k){
oracle.weights(alpha = alphas[k], n_g = n_g, pi0_g = 1-pi1_g, mu1_g = mu1_g, pi0Est = T)
})
optimal.weights <- lapply(1:nalphas, function(k){
oracle.weights(alpha = alphas[k], n_g = n_g, pi0_g = pi0_g, mu1_g = mu1_g, pi0Est = T)
})
optimal.weights
rep(pi1_g/(1-pi1_g)/pi1, n_g)
rep((1-pi0_g)/pi0_g/pi1, n_g)
pi1
n+g
pi0_g
unique(rep((1-pi0_g)/pi0_g/pi1, n_g))
rep(c(2,4), c(3,9))
rep(c(2,4)/2, c(3,9))
weight_type
?replace
replace(c(1, NA), NA, 2)
if(is.na(c(1, NA)))
sad
is.na(c(1, NA))
anyNA(c(1, NA)
)
ifelse(is.na(gamma), 1 / normalize(1:n), gamma))
gamma
ifelse(is.na(gamma), 1 / normalize(1:n), gamma))
ifelse(is.na(gamma), 1 / normalize(1:n), gamma)
ifelse(is.na(gamma), 1 / normalize(1:1000), gamma)
ifelse(is.na(gamma), 1 / normalize(1:n), gamma)
c
temp
temp <- matrix()
temp
temp[1,1] <- list()
temp[1,1] <- list(1,2,3)
n <- sum(n_g)
gammas <- ifelse(is.na(gamma), 1 / normalize(1:n), gamma)
optimal_weights <- lapply(1:nalphas, function(k){
lapply(1:length(gammas), function(j){
oracle.weights(alpha = alphas[k]*gammas[j], n_g = n_g, pi0_g = 1-pi1_g, mu1_g = mu1_g, pi0Est = T)
})
})
optimal_weights <- lapply(1:nalphas, function(k){
lapply(1:length(gammas), function(j){
oracle.weights(alpha = alphas[k]*gammas[j], n_g = n_g, pi0_g = pi0_g, mu1_g = mu1_g, pi0Est = T)
})
})
optimal_weights
optimal_weights[[1]]
nrow(expr_params)
expr_params
expr_params[, 1]
optimal_weights[[1]][[1]]
expr_params
expr_params
expr_params[j, "gamma"]
expr_params[1, "gamma"]
expr_params[2, "gamma"]
optimal_weights <- lapply(1:nalphas, function(k){
lapply(1:nrow(expr_params), function(j){
gam <- expr_params[j, "gamma"]
gam <- ifelse(is.na(gam), 1/normalize(1:n), gam)
oracle.weights(alpha = alphas[k]*gam, n_g = n_g, pi0_g = 1-pi1_g, mu1_g = mu1_g, pi0Est = T)
})
})
optimal_weights <- lapply(1:nalphas, function(k){
lapply(1:nrow(expr_params), function(j){
gam <- expr_params[j, "gamma"]
gam <- ifelse(is.na(gam), 1/normalize(1:n), gam)
oracle.weights(alpha = alphas[k]*gam, n_g = n_g, pi0_g = pi0_g, mu1_g = mu1_g, pi0Est = T)
})
})
optimal_weights[[1]]
0.1/0.9
0.1/0.9
0.01/0.99
seq(0.01, 0.1, length.out = 2)
oracle.weights(0.05, c(1,1), c(0.99, 0.9), c(2,2))
oracle.weights <- function(alpha, n_g, pi0_g, mu1_g, pi0Est = T) {
pi_g <- n_g/sum(n_g)
#lambda_alpha <- solve.mFDR(alpha, n_g, pi0_g, mu1_g)
mFDR1 <- function(c) {
V <- c()
R <- c()
for(i in 1:length(pi0_g)) {
pi0 = pi0_g[i]
mu1 = mu1_g[i]
n = n_g[i]
t = lfdr.inverse(c, pi0, mu1)
V[i] = n*pi0*t
R[i] = V[i] + n*(1-pi0)*nonnull.cdf(t, mu1)
}
return(sum(V)/sum(R))
}
lambda_alpha <- vecbinsolv(zf = alpha, fun = mFDR1 , tlo = 0, thi = 1, nits = 30)
w <- c()
t <- c()
for(i in 1:length(n_g)) {
t[i] <- lfdr.inverse(lambda_alpha, pi0 = pi0_g[i], mu1 = mu1_g[i])
}
if(pi0Est) {
t <- t/sum(t*pi0_g*pi_g)
} else{
t <- t/mean(t)
}
for(i in 1:length(n_g)) {
w <- c(w, rep(t[i], n_g[i]))
}
return(list(weight = w, cut = lambda_alpha))
}
oracle.weights(0.05, c(1,1), c(0.99, 0.9), c(2,2))
oracle.weights(0.05, c(1,1), c(0.99, 0.9), c(2,2),F)
